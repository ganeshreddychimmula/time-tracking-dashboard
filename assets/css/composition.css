.c-box {
  padding: var(--space-300, 24px); /* Use a global spacing token */
  background-color: inherit;
  border-radius: var(--border-radius-standard);
  /* Add any other "box-like" defaults here */
}

.c-cover {
  display: flex;
  flex-direction: column;
  justify-content: center; /* This is one way to center the main item */
  align-items: center;
  min-height: 100vh; /* Fills its container */
}

.c-sidebar-layout {
  display: flex;
  flex-wrap: wrap; /* ↓ The default value is the first point on the modular scale */
  gap: var(--gutter, var(--space-m-l));
  width: 100%;
}
.c-sidebar-layout > :first-child {
  /* ↓ The width when the sidebar _is_ a sidebar */
  flex-basis: 16rem;
  flex-grow: 1;
  align-items: stretch;
}
.c-sidebar-layout > :last-child {
  /* ↓ Grow from nothing */
  flex-basis: 0;
  flex-grow: 999; /* ↓ Wrap when the elements are of equal width */
  min-inline-size: var(--collapse-point);
  /* max-inline-size: var(--limit-point); */
}

/* The Stack primitive */
.c-stack > * + * {
  margin-block-start: var(--space-300, 1.5rem);
}

.c-dashboard {
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(var(--min-grid-item-size), 1fr)
  );
  gap: var(--gutter, var(--space-m-l));
}

.c-dashboard > * {
  min-width: 0;
}

.c-view-selector {
  padding: var(--space-300-400, 24px);
}

.c-cluster {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

.c-switcher {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  gap: calc(var(--line-height-medium-font) * 1rem);
}

.c-switcher > * {
  flex-grow: 0;
  /* The threshold is the container width at which the layout "breaks" */
  flex-basis: calc((var(--threshold) - 100%) * 999);
}
